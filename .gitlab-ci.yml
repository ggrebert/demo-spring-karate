variables:
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  DOCKER_DRIVER: overlay2
  # MySQL
  MYSQL_USER: app
  MYSQL_PASSWORD: mySecretPassword
  MYSQL_ROOT_PASSWORD: mySecretPassword
  MYSQL_DATABASE: app
  MYSQL_HOST: mysql:3306
  # PostgreSQL
  POSTGRES_USER: app
  POSTGRES_PASSWORD: mySecretPassword
  POSTGRES_DB: app
  POSTGRES_HOST: postgres:5432
  #MsSQL
  SA_PASSWORD: myStrong(!)Password
  ACCEPT_EULA: Y
  MSSQL_USER: sa
  MSSQL_PASSWORD: myStrong(!)Password
  MSSQL_DATABASE: msdb
  MSSQL_HOST: microsoft__mssql-server-linux:1433
  SECURE_ANALYZERS_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SAST_ANALYZER_IMAGE_TAG: 2
  DS_MAJOR_VERSION: 2
  SECRETS_ANALYZER_VERSION: 3
  SAST_JAVA_VERSION: 11
  DS_EXCLUDED_PATHS: "spec, test, tests, tmp"
  SEARCH_MAX_DEPTH: 4

stages:
  - build
  - package
  - check

.build: &build
  stage: build
  image: maven:3-jdk-8-alpine
  script:
    - export profile=$( echo ${CI_JOB_NAME} | awk '{print $2}' )
    - mvn $MAVEN_CLI_OPTS install -Drevision=$CI_COMMIT_REF_SLUG-${profile} -P${profile}
    - cat target/site/jacoco/index.html
  coverage: '/Total.*?([0-9]{1,3})\s?%/'
  artifacts:
    paths:
      - target/*.jar
      - target/site/jacoco
      - target/cucumber-html-reports
      - target/surefire-reports/*.html
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
    expire_in: 5 days
  cache:
    key: build-java
    paths:
      - .m2/repository

.package: &package
  stage: package
  image: docker:stable
  services:
    - docker:stable-dind
  script:
    - export profile=$( echo ${CI_JOB_NAME} | awk '{print $2}' )
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${profile} .
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${profile}
  only:
    - master
    - tags

build h2:
  <<: *build

build mysql:
  <<: *build
  services:
    - mysql

build mariadb:
  <<: *build
  services:
    - name: mariadb
      alias: mysql

build postgresql:
  <<: *build
  services:
    - postgres:alpine

build mssql:
  <<: *build
  services:
    - microsoft/mssql-server-linux

package h2:
  <<: *package
  dependencies:
    - build h2

package mysql:
  <<: *package
  dependencies:
    - build mysql

package mariadb:
  <<: *package
  dependencies:
    - build mariadb

package postgresql:
  <<: *package
  dependencies:
    - build postgresql

package mssql:
  <<: *package
  dependencies:
    - build mssql


.sast-analyzer:
  stage: check
  services: []
  dependencies: []
  allow_failure: true
  artifacts:
    reports:
      sast: gl-sast-report.json
  script:
    - /analyzer run

.ds-analyzer:
  stage: check
  services: []
  dependencies: []
  allow_failure: true
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
  script:
    - /analyzer run

## SAST

bandit-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/bandit:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.py'

brakeman-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/brakeman:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - 'config/routes.rb'

eslint-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/eslint:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.html'
        - '**/*.js'

flawfinder-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/flawfinder:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.c'
        - '**/*.cpp'

gosec-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/gosec:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.go'

nodejs-scan-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/nodejs-scan:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - 'package.json'

phpcs-security-audit-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/phpcs-security-audit:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.php'

pmd-apex-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/pmd-apex:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.cls'

security-code-scan-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/security-code-scan:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.csproj'
        - '**/*.vbproj'

sobelow-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/sobelow:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - 'mix.exs'

spotbugs-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/spotbugs:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.groovy'
        - '**/*.java'
        - '**/*.scala'

tslint-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/tslint:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.ts'

### SECRET

secrets-sast:
  extends: .sast-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/secrets:$SECRETS_ANALYZER_VERSION"
  rules:
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json

### Dependency Scanning

gemnasium-dependency_scanning:
  extends: .ds-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/gemnasium:$DS_MAJOR_VERSION"
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '{Gemfile.lock,*/Gemfile.lock,*/*/Gemfile.lock}'
        - '{composer.lock,*/composer.lock,*/*/composer.lock}'
        - '{gems.locked,*/gems.locked,*/*/gems.locked}'
        - '{go.sum,*/go.sum,*/*/go.sum}'
        - '{npm-shrinkwrap.json,*/npm-shrinkwrap.json,*/*/npm-shrinkwrap.json}'
        - '{package-lock.json,*/package-lock.json,*/*/package-lock.json}'
        - '{yarn.lock,*/yarn.lock,*/*/yarn.lock}'

gemnasium-maven-dependency_scanning:
  extends: .ds-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/gemnasium-maven:$DS_MAJOR_VERSION"
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '{build.gradle,*/build.gradle,*/*/build.gradle}'
        - '{build.gradle.kts,*/build.gradle.kts,*/*/build.gradle.kts}'
        - '{build.sbt,*/build.sbt,*/*/build.sbt}'
        - '{pom.xml,*/pom.xml,*/*/pom.xml}'

gemnasium-python-dependency_scanning:
  extends: .ds-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/gemnasium-python:$DS_MAJOR_VERSION"
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '{requirements.txt,*/requirements.txt,*/*/requirements.txt}'
        - '{requirements.pip,*/requirements.pip,*/*/requirements.pip}'
        - '{Pipfile,*/Pipfile,*/*/Pipfile}'
        - '{requires.txt,*/requires.txt,*/*/requires.txt}'
        - '{setup.py,*/setup.py,*/*/setup.py}'
      # Support passing of $PIP_REQUIREMENTS_FILE
      # See https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#configuring-specific-analyzers-used-by-dependency-scanning
    - if: $CI_COMMIT_BRANCH && $PIP_REQUIREMENTS_FILE

bundler-audit-dependency_scanning:
  extends: .ds-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/bundler-audit:$DS_MAJOR_VERSION"
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '{Gemfile.lock,*/Gemfile.lock,*/*/Gemfile.lock}'

retire-js-dependency_scanning:
  extends: .ds-analyzer
  image:
    name: "$SECURE_ANALYZERS_PREFIX/retire.js:$DS_MAJOR_VERSION"
  rules:
    - if: $DEPENDENCY_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '{package.json,*/package.json,*/*/package.json}'

### License

license:
  stage: check
  image:
    name: docker.sudouest.sii.fr/community/tools/license
    entrypoint: [""]
  variables:
    LM_REPORT_FILE: gl-license-scanning-report.json
    SETUP_CMD: $LICENSE_MANAGEMENT_SETUP_CMD
  allow_failure: true
  script:
    -
      >
      if [[ ! -f doc/dependency_decisions.yml ]]; then
        mkdir -p doc
        cp /dependency_decisions.yml doc/dependency_decisions.yml
      fi
    - /run.sh analyze .
    - license_report
  artifacts:
    reports:
      license_scanning: $LM_REPORT_FILE
  dependencies: []
  rules:
    - if: $LICENSE_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH

### Container scanning

container_scanning:
  stage: check
  image: $SECURE_ANALYZERS_PREFIX/klar:$SAST_ANALYZER_IMAGE_TAG
  variables:
    # By default, use the latest clair vulnerabilities database, however, allow it to be overridden here with a specific image
    # to enable container scanning to run offline, or to provide a consistent list of vulnerabilities for integration testing purposes
    CLAIR_DB_IMAGE_TAG: "latest"
    CLAIR_DB_IMAGE: "$SECURE_ANALYZERS_PREFIX/clair-vulnerabilities-db:$CLAIR_DB_IMAGE_TAG"
    # Override the GIT_STRATEGY variable in your `.gitlab-ci.yml` file and set it to `fetch` if you want to provide a `clair-whitelist.yml`
    # file. See https://docs.gitlab.com/ee/user/application_security/container_scanning/index.html#overriding-the-container-scanning-template
    # for details
    GIT_STRATEGY: none
    CI_APPLICATION_REPOSITORY: ${CI_REGISTRY_IMAGE}
    CI_APPLICATION_TAG: ${CI_COMMIT_REF_SLUG}-h2
  allow_failure: true
  services:
    - name: $CLAIR_DB_IMAGE
      alias: clair-vulnerabilities-db
  script:
    - /analyzer run
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  dependencies: []
  rules:
    - if: $CONTAINER_SCANNING_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH

code_quality:
  stage: check
  image: docker
  allow_failure: true
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.10"
  needs: []
  script:
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

